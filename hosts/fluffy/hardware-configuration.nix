# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:
let
  mountOptions = [ "compress=zstd:7" "noatime" ];
in
{
  imports =
    [
      (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ehci_pci" "ahci" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" "i915" ];
  boot.initrd.kernelModules = [ "i915" ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.kernelParams = [ "i915.modeset=1" "amdgpu.runpm=0" "amdgpu.ppfeaturemask=0xfffd7fff" "amdgpu.si_support=1" "radeon.si_support=0" ];
  boot.extraModulePackages = [ ];
  boot.kernel.sysctl = {
    "vm.overcommit_memory" = 2;
    "vm.overcommit_ratio" = 100;
  };
  boot.kernelPackages = pkgs.linuxPackages_zen;

  boot.initrd.luks.devices."system".device = "/dev/disk/by-uuid/e8924f0d-df57-423e-9331-dc3d4a3e54a8";

  fileSystems = {
    "/" = {
      device = "none";
      fsType = "tmpfs";
      options = [
        "size=512M"
        "mode=755"
      ];
    };

    "/boot" =
      {
        device = "/dev/disk/by-uuid/C325-5886";
        fsType = "vfat";
      };

    "/nix" =
      {
        device = "/dev/disk/by-uuid/2a841409-25de-4158-ba82-8fe3ad0fd7a7";
        fsType = "btrfs";
        options = [ "subvol=@nix" ] ++ mountOptions;
      };

    "/nix/persist" =
      {
        device = "/dev/disk/by-uuid/2a841409-25de-4158-ba82-8fe3ad0fd7a7";
        fsType = "btrfs";
        options = [ "subvol=@persist" ] ++ mountOptions;
      };

    "/home" =
      {
        device = "/dev/disk/by-uuid/2a841409-25de-4158-ba82-8fe3ad0fd7a7";
        fsType = "btrfs";
        options = [ "subvol=@home" ] ++ mountOptions;
      };
  };




  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.eno1.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp8s0.useDHCP = lib.mkDefault true;

  hardware.cpu.intel.updateMicrocode = lib.mkDefault true;
}
